#!/usr/bin/expect -f
################################################################################
# DroidForge UAT Bootstrap Script (Lean)
#
# This lean script prepares the environment, installs DroidForge,
# registers the MCP server, restarts droid, and hands control to you.
#
# It intentionally does NOT run the onboarding flow or assertions.
# You complete testing manually once droid relaunches.
################################################################################

# ============================================================================
# CONFIGURATION
# ============================================================================
set timeout 120  ;# Max seconds to wait for each expect pattern
set test_repo "/home/richard/code/droidtest"
set cleanup_script "/home/richard/.factory/cleanup-droidtest.sh"
set log_dir "/home/richard/.factory/uat-test-logs"
set timestamp [clock format [clock seconds] -format "%Y%m%d-%H%M%S"]
set report_file "$log_dir/uat-report-$timestamp.md"
set transcript_file "$log_dir/uat-transcript-$timestamp.log"

# Test data for onboarding
set project_description "iOS 2D artillery game with physics (wind, power, angle) - single player vs CPU"
set methodology_choice "2"  ;# TDD

# ============================================================================
# HELPER PROCEDURES
# ============================================================================

# Log both to console and transcript file
proc log_output {message} {
    global transcript_file
    puts "$message"
    set fp [open "$transcript_file" a]
    puts $fp "$message"
    close $fp
}

# Log section headers
proc log_section {title} {
    set separator "========================================"
    log_output "\n$separator"
    log_output "$title"
    log_output "$separator\n"
}

# ============================================================================
# ENSURE LOG DIRECTORY EXISTS
# ============================================================================
file mkdir $log_dir

# ============================================================================
# STEP 1: CLEANUP PREVIOUS TEST RUN
# ============================================================================
log_section "STEP 1: Cleaning up previous test run"

# This spawns a new process and returns control to expect
spawn bash -c "$cleanup_script"
expect eof
log_output "✓ Cleanup complete\n"

# ============================================================================
# STEP 2: INSTALL LATEST DROIDFORGE
# ============================================================================
if {[info exists env(UAT_SKIP_INSTALL)] && $env(UAT_SKIP_INSTALL) == "1"} {
    log_section "STEP 2: Skipping global install (UAT_SKIP_INSTALL=1)"
    log_output "ℹ Using whatever droidforge is already available (e.g., npm link local build)"
} else {
    log_section "STEP 2: Installing latest DroidForge"

    spawn bash -c "npm install -g droidforge@latest"
    expect {
        # Pattern matching: look for specific text in output
        "added" {
            log_output "✓ DroidForge installed successfully"
            exp_continue
        }
        "up to date" {
            log_output "✓ DroidForge already up to date"
            exp_continue
        }
        "changed" {
            log_output "✓ DroidForge updated successfully"
            exp_continue
        }
        eof {
            # Process finished normally
        }
        timeout {
            log_output "✗ ERROR: npm install timed out"
            exit 1
        }
    }
}

# ============================================================================
# STEP 2.5: INSTALL & REGISTER MCP SERVER (LEAN)
# ============================================================================
log_section "STEP 3: Registering DroidForge MCP server"

set timeout 30

# Remove any existing registration (ignore failures)
spawn bash -c "droid mcp remove droidforge"
expect {
    -re "(?i)removed|not found" { log_output "ℹ Existing MCP entry removed (or not present)" }
    timeout { log_output "ℹ MCP remove command produced no output (continuing)" }
    eof {}
}

# Add stdio MCP server via CLI (non-interactive)
spawn bash -c "droid mcp add droidforge droidforge-mcp-server --type stdio"
expect {
    -re "(?i)Added stdio MCP server" { log_output "✓ MCP server registered via CLI" }
    timeout { log_output "✗ ERROR: droid mcp add timed out"; exit 1 }
    eof {}
}

log_output "Waiting 2 seconds before launching droid..."
sleep 2

# ============================================================================
# STEP 4: RELAUNCH DROID AND HAND CONTROL TO USER
# ============================================================================
log_section "STEP 4: Launching droid (manual testing)"
cd $test_repo
spawn droid
log_output "\nYou are now in a live droid session. Proceed with manual testing."
log_output "Tip: run /forge-start to begin onboarding."
interact

log_output "\nSession ended."
exit 0
