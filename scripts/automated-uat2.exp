#!/usr/bin/expect -f
################################################################################
# DroidForge UAT2 Bootstrap (force re-add MCP, restart droid, handoff)
#
# Purpose: Do everything needed so you don't have to manually remove/add MCP
#          or restart droid. No onboarding automation; you take it from there.
#
# Usage:
#   - Use npm latest (published):
#       scripts/automated-uat2.exp
#   - Use your local linked build (skip install):
#       UAT_SKIP_INSTALL=1 scripts/automated-uat2.exp
#
# Env (optional):
#   UAT_REPO=/path/to/test/repo   # default: /home/richard/code/droidtest
#   UAT_SKIP_INSTALL=1            # skip npm install -g droidforge@latest
################################################################################

# Settings
set timeout 120
set test_repo [expr {[info exists env(UAT_REPO)] ? $env(UAT_REPO) : "/home/richard/code/droidtest"}]
set cleanup_script "/home/richard/.factory/cleanup-droidtest.sh"
set log_dir "/home/richard/.factory/uat-test-logs"
set timestamp [clock format [clock seconds] -format "%Y%m%d-%H%M%S"]
set transcript_file "$log_dir/uat2-transcript-$timestamp.log"

proc log_output {message} {
    global transcript_file
    puts "$message"
    set fp [open "$transcript_file" a]
    puts $fp "$message"
    close $fp
}

proc log_section {title} {
    set sep "========================================"
    log_output "\n$sep"
    log_output "$title"
    log_output "$sep\n"
}

file mkdir $log_dir

# STEP 1: Cleanup
log_section "STEP 1: Cleanup previous run (best-effort)"
if {[file exists $cleanup_script]} {
    spawn bash -c "$cleanup_script"
    expect eof
} else {
    # Fallback: remove repo state only
    spawn bash -c "rm -rf $test_repo/.droidforge $test_repo/DroidForge_user_guide_en.md"
    expect eof
}
log_output "✓ Cleanup complete"

# STEP 2: Optional global install
if {[info exists env(UAT_SKIP_INSTALL)] && $env(UAT_SKIP_INSTALL) == "1"} {
    log_section "STEP 2: Skipping global install (UAT_SKIP_INSTALL=1)"
} else {
    log_section "STEP 2: Installing latest droidforge from npm"
    spawn bash -c "npm install -g droidforge@latest"
    expect {
        "added" { log_output "✓ Installed"; exp_continue }
        "up to date" { log_output "✓ Already up to date"; exp_continue }
        "changed" { log_output "✓ Updated"; exp_continue }
        timeout { log_output "✗ ERROR: npm install timed out"; exit 1 }
        eof {}
    }
}

# STEP 3: Register MCP via CLI
log_section "STEP 3: Register MCP via CLI"
set timeout 30

spawn bash -c "droid mcp remove droidforge"
expect {
    -re "(?i)removed|not found" { log_output "ℹ Existing MCP entry removed (or not present)" }
    timeout { log_output "ℹ MCP remove command produced no output (continuing)" }
    eof {}
}

spawn bash -c "droid mcp add droidforge droidforge-mcp-server --type stdio"
expect {
    -re "(?i)Added stdio MCP server" { log_output "✓ MCP server registered via CLI" }
    timeout { log_output "✗ ERROR: droid mcp add timed out"; exit 1 }
    eof {}
}

log_output "Waiting 2 seconds before launching droid..."
sleep 2

# STEP 4: Relaunch and handoff
log_section "STEP 4: Relaunch droid and handoff"
cd $test_repo
spawn droid
log_output "You are now in a live droid session. Run /forge-start when ready."
interact
log_output "Session closed."
exit 0
